# -*- coding: utf-8 -*-
"""Analiza dataset-a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W7zLQI0yXSAXKF6BcxrqIFq0b6S_DBpy
"""

from google.colab import auth
from googleapiclient.discovery import build
from io import StringIO
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

plt.style.use('ggplot')
sns.set(style="whitegrid")
colors = ["#3498db", "#e74c3c", "#2ecc71", "#f39c12", "#9b59b6", "#1abc9c", "#34495e"]

# =============================================================================
# 1. UČITAVANJE I OSNOVNE STATISTIKE
# =============================================================================
print("===== UČITAVANJE FAIRFACE DATASETA =====")

# Autentifikacija za Drive API
auth.authenticate_user()
drive_service = build('drive', 'v3')

# Učitavanje CSV datoteka
train_csv_id = '1QHxkpu4EXx_KFhFId1gqGUkq3vMBy5Ir'  # fairface_label_train.csv
request = drive_service.files().get_media(fileId=train_csv_id)
content = request.execute().decode('utf-8')
df_train = pd.read_csv(StringIO(content))

print(f"Učitan trening dataset sa {len(df_train):,} uzoraka")
print(f"Kolone: {list(df_train.columns)}")
print(f"Nedostajuće vrijednosti: {df_train.isnull().sum().sum()}")

# =============================================================================
# 2. DISTRIBUCIJE OSNOVNIH KARAKTERISTIKA
# =============================================================================
print("\n===== OSNOVNE DISTRIBUCIJE =====")

# Definiranje redoslijeda za dobne grupe
age_order = ['0-2', '3-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', 'more than 70']

# Računanje distribucija
race_counts = df_train['race'].value_counts()
gender_counts = df_train['gender'].value_counts()
age_counts = df_train['age'].value_counts().reindex(age_order)

race_pct = (race_counts / len(df_train) * 100).round(2)
gender_pct = (gender_counts / len(df_train) * 100).round(2)
age_pct = (age_counts / len(df_train) * 100).round(2)

print(f"Rasa - najzastupljenija: {race_counts.index[0]} ({race_pct.iloc[0]}%)")
print(f"Spol - muški: {gender_pct['Male']}%, ženski: {gender_pct['Female']}%")
print(f"Dob - najzastupljenija: {age_counts.idxmax()} ({age_pct.max()}%)")

# Vizualizacija osnovnih distribucija
fig, axes = plt.subplots(1, 3, figsize=(18, 6))

# Rasa
race_counts.plot(kind='bar', ax=axes[0], color=colors[:len(race_counts)])
axes[0].set_title('Distribucija rase', fontsize=14, fontweight='bold')
axes[0].set_xlabel('Rasa')
axes[0].set_ylabel('Broj uzoraka')
axes[0].tick_params(axis='x', rotation=45)

# Spol
gender_counts.plot(kind='bar', ax=axes[1], color=colors[:len(gender_counts)])
axes[1].set_title('Distribucija spola', fontsize=14, fontweight='bold')
axes[1].set_xlabel('Spol')
axes[1].set_ylabel('Broj uzoraka')
axes[1].tick_params(axis='x', rotation=0)

# Dob
age_counts.plot(kind='bar', ax=axes[2], color=colors[:len(age_counts)])
axes[2].set_title('Distribucija dobi', fontsize=14, fontweight='bold')
axes[2].set_xlabel('Dobna skupina')
axes[2].set_ylabel('Broj uzoraka')
axes[2].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()

# =============================================================================
# 3. CROSS-TAB ANALIZA (RASA VS SPOL)
# =============================================================================
print("\n===== ANALIZA RASA VS SPOL =====")

race_gender = pd.crosstab(df_train['race'], df_train['gender'])
race_gender_pct = race_gender.div(race_gender.sum(axis=1), axis=0) * 100

print("Ravnoteža spola po rasama (%):")
print(race_gender_pct.round(1))

# Pronalaženje najveće neravnoteže
gender_imbalance = abs(race_gender_pct - 50).max(axis=1)
max_imbalance_race = gender_imbalance.idxmax()
print(f"\n  Najveća neravnoteža: {max_imbalance_race} ({gender_imbalance.max():.1f}% razlika od idealne 50/50)")

# Heatmap rasa vs spol
plt.figure(figsize=(10, 8))
sns.heatmap(race_gender, annot=True, fmt="d", cmap="YlGnBu", linewidths=0.5)
plt.title('Distribucija rase i spola u FairFace datasetu', fontsize=16, fontweight='bold')
plt.ylabel('Rasa', fontsize=12)
plt.xlabel('Spol', fontsize=12)
plt.tight_layout()
plt.show()

# =============================================================================
# 4. USPOREDBA SA DRUGIM DATASETIMA
# =============================================================================
print("\n===== USPOREDBA SA DRUGIM DATASETIMA =====")

# Definicija podataka za različite datasete (aproksimativni iz literature)
datasets_comparison = {
    'LFWA+': [85, 5, 0, 4, 3, 1, 2],
    'CelebA': [85, 4, 0, 5, 3, 1, 2],
    'UTKFace': [50, 20, 0, 15, 10, 2, 3],
    'FairFace': race_pct.reindex(['White', 'Black', 'Latino_Hispanic', 'East Asian', 'Indian', 'Southeast Asian', 'Middle Eastern']).values
}

race_labels_comp = ['White', 'Black', 'Latino', 'East Asian', 'Indian', 'SE Asian', 'Mid Eastern']

# Vizualizacija usporedbe
plt.figure(figsize=(14, 8))
x = np.arange(len(race_labels_comp))
width = 0.2

for i, (dataset, percentages) in enumerate(datasets_comparison.items()):
    offset = width * i
    plt.bar(x + offset, percentages, width, label=dataset, color=colors[i])

# Idealna linija
plt.axhline(y=100/7, color='red', linestyle='--', linewidth=2, label='Idealna (14.3%)')

plt.xlabel('Rasa', fontsize=12)
plt.ylabel('Postotak (%)', fontsize=12)
plt.title('Usporedba rasne distribucije između dataseta', fontsize=16, fontweight='bold')
plt.xticks(x + width*1.5, race_labels_comp, rotation=45)
plt.legend()
plt.grid(True, axis='y', alpha=0.3)
plt.tight_layout()
plt.show()

# =============================================================================
# 5. BALANSIRANOST (ENTROPIJA ANALIZA)
# =============================================================================
print("\n===== ANALIZA BALANSIRANOSTI =====")

def calculate_entropy(distribution):
    """Računa entropiju distribucije (veća = bolja balansiranost)"""
    distribution = np.array(distribution)
    distribution = distribution / np.sum(distribution)
    # Dodavanje male konstante da se izbjegne log(0)
    distribution = distribution + 1e-10
    return -np.sum(distribution * np.log2(distribution))

# Računanje entropije za sve datasete
entropies = {}
for dataset, dist in datasets_comparison.items():
    entropies[dataset] = calculate_entropy(dist)

# Idealna entropija (sve kategorije jednako zastupljene)
ideal_entropy = calculate_entropy([100/7] * 7)
entropies['Idealna'] = ideal_entropy

print("Entropija (mjera balansiranosti):")
for dataset, entropy in entropies.items():
    print(f"  {dataset}: {entropy:.3f}")

# Vizualizacija entropije
plt.figure(figsize=(10, 6))
datasets = list(entropies.keys())
entropy_values = list(entropies.values())

bars = plt.bar(datasets, entropy_values, color=colors[:len(datasets)])
plt.title('Balansiranost dataseta (Entropija rasne distribucije)', fontsize=16, fontweight='bold')
plt.xlabel('Dataset', fontsize=12)
plt.ylabel('Entropija (veća = bolja balansiranost)', fontsize=12)
plt.ylim(0, 3)

# Dodavanje vrijednosti na stupce
for bar, value in zip(bars, entropy_values):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.05,
             f'{value:.2f}', ha='center', va='bottom', fontweight='bold')

plt.grid(True, axis='y', alpha=0.3)
plt.tight_layout()
plt.show()

print(f"\n FairFace ima entropiju {entropies['FairFace']:.3f}, što je {((entropies['FairFace']/ideal_entropy)*100):.1f}% idealne balansiranosti")

# =============================================================================
# 6. KOMERCIJALNI API USPOREDBA
# =============================================================================
print("\n===== USPOREDBA SA KOMERCIJALNIM API-JIMA =====")

# Podaci o tačnosti prepoznavanja spola iz literature (aproksimativni)
api_accuracy = {
    'Amazon': [94.5, 92.8, 93.7, 91.6, 95.4, 96.5, 94.5],
    'Microsoft': [80.0, 74.2, 80.0, 82.3, 84.6, 82.7, 80.6],
    'Face++': [92.4, 87.5, 89.0, 89.1, 92.3, 86.9, 90.0],
    'IBM': [93.8, 84.3, 90.5, 88.6, 92.8, 88.4, 91.5],
    'FairFace': [98.9, 96.9, 97.3, 97.0, 99.0, 98.9, 98.2]
}

races_api = ['White', 'Black', 'E.Asian', 'SE.Asian', 'Latino', 'Indian', 'Mid.East']

# Računanje prosječne tačnosti i standardne devijacije
print("Performanse API-ja za prepoznavanje spola:")
for api, accuracies in api_accuracy.items():
    mean_acc = np.mean(accuracies)
    std_acc = np.std(accuracies)
    print(f"  {api}: {mean_acc:.1f}% ± {std_acc:.1f}%")

# Vizualizacija API usporedbe
plt.figure(figsize=(14, 8))
x = np.arange(len(races_api))
width = 0.15

for i, (api, accuracies) in enumerate(api_accuracy.items()):
    offset = width * i
    plt.bar(x + offset, accuracies, width, label=api, color=colors[i])

plt.xlabel('Rasa', fontsize=12)
plt.ylabel('Tačnost prepoznavanja spola (%)', fontsize=12)
plt.title('Usporedba tačnosti prepoznavanja spola različitih API-ja', fontsize=16, fontweight='bold')
plt.xticks(x + width*2, races_api, rotation=45)
plt.legend()
plt.grid(True, axis='y', alpha=0.3)
plt.ylim(70, 100)
plt.tight_layout()
plt.show()

# =============================================================================
# 7. KLJUČNI ZAKLJUČCI
# =============================================================================
print("\n===== KLJUČNI ZAKLJUČCI =====")

conclusions = [
    f" FairFace sadrži {len(df_train):,} slika sa značajno boljom rasnom balansiranosti",
    f" Entropija {entropies['FairFace']:.3f} je {((entropies['FairFace']/entropies['LFWA+'])*100-100):.0f}% bolja od LFWA+",
    f" Spolna neravnoteža postoji u {max_imbalance_race} kategoriji ({gender_imbalance.max():.1f}% razlika)",
    f" Modeli trenirani na FairFace pokazuju konzistentniju tačnost kroz sve rasne grupe",
    f" FairFace je idealan izbor za treniranje pravednih demografskih klasifikatora"
]

for conclusion in conclusions:
    print(conclusion)

# Kreiranje summary grafikona
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))

# 1. Rasna distribucija - pie chart
ax1.pie(race_pct.values, labels=race_pct.index, autopct='%1.1f%%',
        colors=colors[:len(race_pct)], startangle=90)
ax1.set_title('FairFace - Rasna distribucija', fontweight='bold')

# 2. Spolna ravnoteža po rasama
race_gender_pct.plot(kind='bar', ax=ax2, color=colors[:2])
ax2.set_title('Spolna ravnoteža po rasama', fontweight='bold')
ax2.set_ylabel('Postotak (%)')
ax2.axhline(y=50, color='red', linestyle='--', alpha=0.7)
ax2.tick_params(axis='x', rotation=45)
ax2.legend(['Ženski', 'Muški'], loc='upper right')

# 3. Usporedba balansiranosti
dataset_names = ['LFWA+', 'CelebA', 'UTKFace', 'FairFace']
dataset_entropies = [entropies[name] for name in dataset_names]
ax3.bar(dataset_names, dataset_entropies, color=colors[:4])
ax3.set_title('Balansiranost dataseta (Entropija)', fontweight='bold')
ax3.set_ylabel('Entropija')
ax3.axhline(y=ideal_entropy, color='red', linestyle='--', alpha=0.7, label='Idealna')
ax3.legend()

api_names = list(api_accuracy.keys())
api_means = [np.mean(api_accuracy[api]) for api in api_names]
ax4.bar(api_names, api_means, color=colors[:len(api_names)])
ax4.set_title('Prosječna tačnost API-ja za spol', fontweight='bold')
ax4.set_ylabel('Tačnost (%)')
ax4.set_ylim(80, 100)

plt.tight_layout()
plt.show()

print(f"\nANALIZA ZAVRŠENA!")
print(f" FairFace je {((entropies['FairFace']/ideal_entropy)*100):.1f}% idealno balansiran")
print(f" Spreman je za treniranje pravednih AI modela!")